{"ast":null,"code":"var _jsxFileName = \"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { scrollToTop } from \"../helpers/scroll\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PaginationComponent = ({\n  itemsCount,\n  itemsPerPage,\n  currentPage,\n  setCurrentPage,\n  alwaysShown = true\n}) => {\n  _s();\n\n  const pagesCount = Math.ceil(itemsCount / itemsPerPage);\n  const isPaginationShown = alwaysShown ? true : pagesCount > 1;\n  const isCurrentPageFirst = currentPage === 1;\n  const isCurrentPageLast = currentPage === pagesCount;\n\n  const changePage = number => {\n    if (currentPage === number) return;\n    setCurrentPage(number);\n    scrollToTop();\n  };\n\n  const onPageNumberClick = pageNumber => {\n    changePage(pageNumber);\n  };\n\n  const onPreviousPageClick = () => {\n    changePage(currentPage => currentPage - 1);\n  };\n\n  const onNextPageClick = () => {\n    changePage(currentPage => currentPage + 1);\n  };\n\n  const setLastPageAsCurrent = () => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(pagesCount);\n    }\n  };\n\n  let isPageNumberOutOfRange;\n  const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\n    const pageNumber = index + 1;\n    const isPageNumberFirst = pageNumber === 1;\n    const isPageNumberLast = pageNumber === pagesCount;\n    const isCurrentPageWithinTwoPageNumbers = Math.abs(pageNumber - currentPage) <= 2;\n\n    if (isPageNumberFirst || isPageNumberLast || isCurrentPageWithinTwoPageNumbers) {\n      isPageNumberOutOfRange = false;\n      return /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => onPageNumberClick(pageNumber),\n        active: pageNumber === currentPage,\n        children: pageNumber\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (!isPageNumberOutOfRange) {\n      isPageNumberOutOfRange = true;\n      return /*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {\n        className: \"muted\"\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this);\n    }\n\n    return null;\n  });\n  useEffect(setLastPageAsCurrent, [pagesCount]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isPaginationShown && /*#__PURE__*/_jsxDEV(Pagination, {\n      children: [/*#__PURE__*/_jsxDEV(Pagination.Prev, {\n        onClick: onPreviousPageClick,\n        disabled: isCurrentPageFirst\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), pageNumbers, /*#__PURE__*/_jsxDEV(Pagination.Next, {\n        onClick: onNextPageClick,\n        disabled: isCurrentPageLast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PaginationComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PaginationComponent;\nPaginationComponent.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n  alwaysShown: PropTypes.bool\n};\nexport default PaginationComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationComponent\");","map":{"version":3,"sources":["/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Pagination.js"],"names":["React","useEffect","Pagination","scrollToTop","PropTypes","PaginationComponent","itemsCount","itemsPerPage","currentPage","setCurrentPage","alwaysShown","pagesCount","Math","ceil","isPaginationShown","isCurrentPageFirst","isCurrentPageLast","changePage","number","onPageNumberClick","pageNumber","onPreviousPageClick","onNextPageClick","setLastPageAsCurrent","isPageNumberOutOfRange","pageNumbers","Array","map","_","index","isPageNumberFirst","isPageNumberLast","isCurrentPageWithinTwoPageNumbers","abs","propTypes","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { scrollToTop } from \"../helpers/scroll\";\nimport PropTypes from \"prop-types\";\n\nconst PaginationComponent = ({\n  itemsCount,\n  itemsPerPage,\n  currentPage,\n  setCurrentPage,\n  alwaysShown = true\n}) => {\n  const pagesCount = Math.ceil(itemsCount / itemsPerPage);\n  const isPaginationShown = alwaysShown ? true : pagesCount > 1;\n  const isCurrentPageFirst = currentPage === 1;\n  const isCurrentPageLast = currentPage === pagesCount;\n\n  const changePage = number => {\n    if (currentPage === number) return;\n    setCurrentPage(number);\n    scrollToTop();\n  };\n\n  const onPageNumberClick = pageNumber => {\n    changePage(pageNumber);\n  };\n\n  const onPreviousPageClick = () => {\n    changePage(currentPage => currentPage - 1);\n  };\n\n  const onNextPageClick = () => {\n    changePage(currentPage => currentPage + 1);\n  };\n\n  const setLastPageAsCurrent = () => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(pagesCount);\n    }\n  };\n\n  let isPageNumberOutOfRange;\n\n  const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\n    const pageNumber = index + 1;\n    const isPageNumberFirst = pageNumber === 1;\n    const isPageNumberLast = pageNumber === pagesCount;\n    const isCurrentPageWithinTwoPageNumbers =\n      Math.abs(pageNumber - currentPage) <= 2;\n\n    if (\n      isPageNumberFirst ||\n      isPageNumberLast ||\n      isCurrentPageWithinTwoPageNumbers\n    ) {\n      isPageNumberOutOfRange = false;\n      return (\n        <Pagination.Item\n          key={pageNumber}\n          onClick={() => onPageNumberClick(pageNumber)}\n          active={pageNumber === currentPage}\n        >\n          {pageNumber}\n        </Pagination.Item>\n      );\n    }\n\n    if (!isPageNumberOutOfRange) {\n      isPageNumberOutOfRange = true;\n      return <Pagination.Ellipsis key={pageNumber} className=\"muted\" />;\n    }\n\n    return null;\n  });\n\n  useEffect(setLastPageAsCurrent, [pagesCount]);\n\n  return (\n    <>\n      {isPaginationShown && (\n        <Pagination>\n          <Pagination.Prev\n            onClick={onPreviousPageClick}\n            disabled={isCurrentPageFirst}\n          />\n          {pageNumbers}\n          <Pagination.Next\n            onClick={onNextPageClick}\n            disabled={isCurrentPageLast}\n          />\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nPaginationComponent.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n  alwaysShown: PropTypes.bool\n};\n\nexport default PaginationComponent;"]},"metadata":{},"sourceType":"module"}