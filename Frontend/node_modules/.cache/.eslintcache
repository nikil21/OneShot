[{"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/index.js":"1","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/App.js":"2","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/colleges.js":"3","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/colleges-list.js":"4","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/services/college.js":"5","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/http-common.js":"6","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Pagination.js":"7","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/helpers/scroll.js":"8","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Sessionselect.js":"9","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Session.js":"10","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Tooltiped.js":"11","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/GoTopButton.js":"12","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/dashboard.js":"13"},{"size":241,"mtime":1632637129626,"results":"14","hashOfConfig":"15"},{"size":1309,"mtime":1632898351954,"results":"16","hashOfConfig":"15"},{"size":3412,"mtime":1632900001366,"results":"17","hashOfConfig":"15"},{"size":6083,"mtime":1632755310840,"results":"18","hashOfConfig":"15"},{"size":376,"mtime":1632924800590,"results":"19","hashOfConfig":"15"},{"size":169,"mtime":1632924822486,"results":"20","hashOfConfig":"15"},{"size":2608,"mtime":1632667414826,"results":"21","hashOfConfig":"15"},{"size":766,"mtime":1632677595372,"results":"22","hashOfConfig":"15"},{"size":1188,"mtime":1632676078712,"results":"23","hashOfConfig":"15"},{"size":1649,"mtime":1632667420103,"results":"24","hashOfConfig":"15"},{"size":348,"mtime":1632667435442,"results":"25","hashOfConfig":"15"},{"size":530,"mtime":1632667125844,"results":"26","hashOfConfig":"15"},{"size":1839,"mtime":1632912444866,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"76goe9",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/index.js",[],["59","60"],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/App.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/colleges.js",["61","62","63"],"import React, { useState, useEffect } from \"react\";\nimport CollegeDataService from \"../services/college\";\n// import { Link } from \"react-router-dom\";\n\nconst College = props => {\n  const initialCollegeState = {\n    id: null,\n    Name: \"\",\n    address: {},\n    Courses: \"\",\n    students: [],\n    SimilarColleges: [],\n  };\n  const [college, setCollege] = useState(initialCollegeState);\n\n  const year = \"Year founded\"\n\n  const getCollege = id => {\n    CollegeDataService.get(id)\n      .then(response => {\n        setCollege(response.data);\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  useEffect(() => {\n    getCollege(props.match.params.id);\n  }, [props.match.params.id]);\n\n  function between(min, max) {  \n    return Math.floor(\n      Math.random() * (max - min) + min\n    )\n  }\n\n  return (\n    <div>\n      {college ? (\n        <div>\n          <h5>{college.Name}</h5>\n          <p>\n            <strong>Address: </strong>{college.Name}, {college.City}, {college.State}<br/>\n            <strong>Year Founded: </strong>{between(1950,2000)}<br/>\n            <strong>Number of Students: </strong>{100}<br/>\n            <strong>Courses Offered: </strong>{college.Courses}\n          </p>\n          <h3> Similar Colleges </h3>\n          <div className=\"row\">\n            {college.SimilarColleges.length > 0 ? (\n             college.SimilarColleges.map((similarcollege, index) => {\n               if (similarcollege.Name != college.Name) {\n                return (\n                  <div className=\"col-lg-4 pb-1\" key={index}>\n                    <div className=\"card\">\n                      <div className=\"card-body\">\n                        <p className=\"card-text\">\n                          <strong>College Name: </strong>{similarcollege.Name}<br/>\n                          <strong>Place: </strong>{similarcollege.City}, {similarcollege.State}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                );\n               }\n\n             })\n            ) : (\n            <div className=\"col-sm-4\">\n              <p>No Similar College data available.</p>\n            </div>\n            )}\n\n          </div>\n\n          <h3> Student Details </h3>\n          <div className=\"row\">\n            {college.students.length > 0 ? (\n             college.students.map((student, index) => {\n               return (\n                 <div className=\"col-lg-4 pb-1\" key={index}>\n                   <div className=\"card\">\n                     <div className=\"card-body\">\n                       <p className=\"card-text\">\n                         <strong>Student Name: </strong>{student.first_name} {student.last_name}<br/>\n                         <strong>Student id: </strong>{student.id}<br/>\n                         <strong>Year of batch: </strong>{student.Year_of_batch}<br/>\n                         <strong>Skills: </strong>{student.Skills}\n                       </p>\n                     </div>\n                   </div>\n                 </div>\n               );\n             })\n            ) : (\n            <div className=\"col-sm-4\">\n              <p>No Student data available.</p>\n            </div>\n            )}\n\n          </div>\n\n        </div>\n      ) : (\n        <div>\n          <br />\n          <p>No college selected.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default College;","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/colleges-list.js",["64","65","66","67","68","69"],"import React, { useState, useEffect } from \"react\";\nimport CollegeDataService from \"../services/college\";\nimport { Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Session from \"./Session\";\nimport Pagination from \"./Pagination\";\nimport GoTopButton from \"./GoTopButton\";\nimport SessionSelect from \"./Sessionselect\";\nimport { useScroll } from \"../helpers/scroll\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import college from \"../services/college\";\n\nconst CollegesList = props => {\n  const [colleges, setColleges] = useState([]);\n  const [searchName, setSearchName ] = useState(\"\");\n  const [searchID, setSearchID ] = useState(\"\");\n  const [searchCourse, setSearchCourse] = useState(\"\");\n  const [courses, setCourses] = useState([\"All Courses\"]);\n\n  useEffect(() => {\n    retrieveColleges();\n    retrieveCourses();\n  }, []);\n\n  const onChangeSearchName = e => {\n    const searchName = e.target.value;\n    setSearchName(searchName);\n  };\n\n  const onChangeSearchID= e => {\n    const searchID = e.target.value;\n    setSearchID(searchID);\n  };\n\n  const onChangeSearchCourse = e => {\n    const searchCourse = e.target.value;\n    setSearchCourse(searchCourse);\n    \n  };\n\n  const retrieveColleges = () => {\n    \n    CollegeDataService.getAll()\n      .then(response => {\n        console.log(response.data);\n        setColleges(response.data.colleges);\n        \n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const retrieveCourses = () => {\n    CollegeDataService.getCourses()\n      .then(response => {\n        console.log(response.data);\n        setCourses([\"All Courses\"].concat(response.data));\n        \n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const refreshList = () => {\n    retrieveColleges();\n  };\n\n  const find = (query, by) => {\n    CollegeDataService.find(query, by)\n      .then(response => {\n        console.log(response.data);\n        setColleges(response.data.colleges);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n\n  const findByName = () => {\n    find(searchName, \"name\")\n  };\n\n  const findByID = () => {\n    find(searchID, \"ID\")\n  };\n\n  const findByCourse = () => {\n    if (searchCourse === \"All Courses\") {\n      refreshList();\n    } else {\n      find(searchCourse, \"Courses\")\n    }\n  };\n  \n  const allSessionsCount = colleges.length;\n  const [sessionsPerPage, setSessionsPerPage] = useState(20);\n  const [currentPage, setCurrentPage] = useState(2);\n  const scrollPosition = useScroll();\n\n  const lastSessionNumber = currentPage * sessionsPerPage;\n  const firstSessionIndex = lastSessionNumber - sessionsPerPage;\n  const limitedSessions = colleges.slice(\n    firstSessionIndex,\n    lastSessionNumber\n  );\n\n  return (\n    <div>\n\n      <div class=\"container\">\n        <div class=\"col-xs-6\">\n          <form class='form-inline'>\n            <div class=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search by name\"\n                value={searchName}\n                onChange={onChangeSearchName}\n              />\n              <div className=\"form-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={findByName}\n                >\n                  Search\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n        <div class=\"col-xs-6\">\n          <form class='form-inline'>\n            <div class=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search by rank\"\n                value={searchID}\n                onChange={onChangeSearchID}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-outline-secondary\"\n                  type=\"button\"\n                  onClick={findByID}\n                >\n                  Search\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n\n\n        <Container>\n        <div className=\"row\">\n          {limitedSessions.map((college) => {\n          const address = `${college.City} ${college.State}, ${college.Country}`;\n          const collegename = `${college.Name}`;\n          return (\n            <div className=\"col-lg-4 pb-1\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{college.Name}</h5>\n                  <p className=\"card-text\">\n                    <strong>Address: </strong>{address}<br/>\n                    <strong>Rank: </strong>{college.ID}<br/>\n                    <strong>College type: </strong>{college.Sector}\n                  </p>\n                  <div className=\"row\">\n                  <Link to={\"/Colleges/\"+college._id} className=\"btn btn-primary col-lg-5 mx-1 mb-1\">\n                    View College Details\n                  </Link>\n                  <a target=\"_blank\" href={\"https://www.google.com/maps/place/\" + collegename + \" \" + address} className=\"btn btn-primary col-lg-5 mx-1 mb-1\">View College In Map</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n        </div>\n        {/* <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand className=\"navbar\">\n          <div>Loaded sessions: {allSessionsCount}</div> */}\n        <SessionSelect\n        itemsPerPage={sessionsPerPage}\n        setItemsPerPage={setSessionsPerPage}\n        />\n        {/* </Navbar.Brand>\n      </Navbar> */}\n        <Pagination\n          itemsCount={allSessionsCount}\n          itemsPerPage={sessionsPerPage}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n          alwaysShown={false}\n        />\n        <GoTopButton visible={scrollPosition > 400} />\n        </Container>\n\n    </div>\n  );\n};\n\nexport default CollegesList;","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/services/college.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/http-common.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Pagination.js",["70"],"import React, { useEffect } from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport { scrollToTop } from \"../helpers/scroll\";\nimport PropTypes from \"prop-types\";\n\nconst PaginationComponent = ({\n  itemsCount,\n  itemsPerPage,\n  currentPage,\n  setCurrentPage,\n  alwaysShown = true\n}) => {\n  const pagesCount = Math.ceil(itemsCount / itemsPerPage);\n  const isPaginationShown = alwaysShown ? true : pagesCount > 1;\n  const isCurrentPageFirst = currentPage === 1;\n  const isCurrentPageLast = currentPage === pagesCount;\n\n  const changePage = number => {\n    if (currentPage === number) return;\n    setCurrentPage(number);\n    scrollToTop();\n  };\n\n  const onPageNumberClick = pageNumber => {\n    changePage(pageNumber);\n  };\n\n  const onPreviousPageClick = () => {\n    changePage(currentPage => currentPage - 1);\n  };\n\n  const onNextPageClick = () => {\n    changePage(currentPage => currentPage + 1);\n  };\n\n  const setLastPageAsCurrent = () => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(pagesCount);\n    }\n  };\n\n  let isPageNumberOutOfRange;\n\n  const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\n    const pageNumber = index + 1;\n    const isPageNumberFirst = pageNumber === 1;\n    const isPageNumberLast = pageNumber === pagesCount;\n    const isCurrentPageWithinTwoPageNumbers =\n      Math.abs(pageNumber - currentPage) <= 2;\n\n    if (\n      isPageNumberFirst ||\n      isPageNumberLast ||\n      isCurrentPageWithinTwoPageNumbers\n    ) {\n      isPageNumberOutOfRange = false;\n      return (\n        <Pagination.Item\n          key={pageNumber}\n          onClick={() => onPageNumberClick(pageNumber)}\n          active={pageNumber === currentPage}\n        >\n          {pageNumber}\n        </Pagination.Item>\n      );\n    }\n\n    if (!isPageNumberOutOfRange) {\n      isPageNumberOutOfRange = true;\n      return <Pagination.Ellipsis key={pageNumber} className=\"muted\" />;\n    }\n\n    return null;\n  });\n\n  useEffect(setLastPageAsCurrent, [pagesCount]);\n\n  return (\n    <>\n      {isPaginationShown && (\n        <Pagination>\n          <Pagination.Prev\n            onClick={onPreviousPageClick}\n            disabled={isCurrentPageFirst}\n          />\n          {pageNumbers}\n          <Pagination.Next\n            onClick={onNextPageClick}\n            disabled={isCurrentPageLast}\n          />\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nPaginationComponent.propTypes = {\n  itemsCount: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n  alwaysShown: PropTypes.bool\n};\n\nexport default PaginationComponent;","/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/helpers/scroll.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Sessionselect.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Session.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/Tooltiped.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/GoTopButton.js",[],"/home/nikilesh/Desktop/MERN stack/Oneshot/frontend/src/components/dashboard.js",["71"],"import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\n\nconst data = {\n  labels: ['Tamil Nadu', 'Maharashtra', 'Uttar Pradesh', 'Karnataka', 'Telangana', 'Other states' ],\n  datasets: [\n    {\n      label: '# of Colleges',\n      data: [21,8,8,7,6,50],\n      backgroundColor: [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        'rgba(255, 206, 86, 0.2)',\n        'rgba(75, 192, 192, 0.2)',\n        'rgba(153, 102, 255, 0.2)',\n        'rgba(255, 159, 64, 0.2)',\n      ],\n      borderColor: [\n        'rgba(255, 99, 132, 1)',\n        'rgba(54, 162, 235, 1)',\n        'rgba(255, 206, 86, 1)',\n        'rgba(75, 192, 192, 1)',\n        'rgba(153, 102, 255, 1)',\n        'rgba(255, 159, 64, 1)',\n      ],\n      borderWidth: 1,\n    },\n  ],\n};\n\nconst legendOpts = {\n    onClick: (e, item) => alert(`Item with text ${item._dataIndex} and index ${item.index} clicked`),\n    onHover: (e, item) => alert(`Item with text ${item.text} and index ${item.index} hovered`),\n  };\n\nconst Dashboard = () => (\n\n    \n  <>\n    <div className='header'>\n      <h3 className='title'>Colleges distribution among states.</h3>\n    </div>\n    <Doughnut \n        data={data}\n        options={{\n            title:{\n              display:true,\n              text:'Colleges per state',\n              fontSize:20\n            },\n            legend:{\n              display:false,\n              position:'right',\n\n            },\n            \n            onClick: function(e, item) {\n             \n             console.log()\n             alert(`Item with text ${item.text} and index ${item.index} clicked`);\n\n            },\n            responsive:true,\n            maintainAspectRatio:true,\n            // defaultFontSize:\"20px\",\n            width:\"4000\",\n            height:\"4000\",\n          }} />\n  </>\n);\n\nexport default Dashboard;\n\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":16,"column":9,"nodeType":"78","messageId":"79","endLine":16,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":53,"column":66,"nodeType":"82","messageId":"83","endLine":53,"endColumn":68},{"ruleId":"84","severity":1,"message":"85","line":54,"column":40,"nodeType":"86","messageId":"87","endLine":54,"endColumn":42},{"ruleId":"76","severity":1,"message":"88","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":14},{"ruleId":"76","severity":1,"message":"89","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":15},{"ruleId":"76","severity":1,"message":"90","line":19,"column":10,"nodeType":"78","messageId":"79","endLine":19,"endColumn":17},{"ruleId":"76","severity":1,"message":"91","line":36,"column":9,"nodeType":"78","messageId":"79","endLine":36,"endColumn":29},{"ruleId":"76","severity":1,"message":"92","line":90,"column":9,"nodeType":"78","messageId":"79","endLine":90,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":180,"column":19,"nodeType":"95","messageId":"96","endLine":180,"endColumn":159,"fix":"97"},{"ruleId":"98","severity":1,"message":"99","line":76,"column":35,"nodeType":"100","endLine":76,"endColumn":47,"suggestions":"101"},{"ruleId":"76","severity":1,"message":"102","line":32,"column":7,"nodeType":"78","messageId":"79","endLine":32,"endColumn":17},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'year' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Navbar' is defined but never used.","'Session' is defined but never used.","'courses' is assigned a value but never used.","'onChangeSearchCourse' is assigned a value but never used.","'findByCourse' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"105","text":"106"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage' and 'setCurrentPage'. Either include them or remove the dependency array. If 'setCurrentPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["107"],"'legendOpts' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[5270,5270]," rel=\"noreferrer\"",{"desc":"108","fix":"109"},"Update the dependencies array to be: [currentPage, pagesCount, setCurrentPage]",{"range":"110","text":"111"},[1973,1985],"[currentPage, pagesCount, setCurrentPage]"]